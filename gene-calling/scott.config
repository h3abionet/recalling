params{
    project_name = "adme"
    cohort_id =  "sbas1ca"
    sample_coverage = "high"
    out_dir = "/projects/scott/genes/core"

    max_memory = 772.GB
    max_cpus = 1
    max_time = 240.h

    // GATK specific settings
    gatk_base = "/spaces/gerrit/projects/adme/soft/gatk-4.0.8.1"
    ref_seq = "/spaces/gerrit/projects/adme/dbs/gatk/bundle/2.8/b37/human_g1k_v37_decoy.fasta"
    dbsnp_sites = "/spaces/gerrit/projects/adme/dbs/gatk/bundle/2.8/b37/dbsnp_138.b37.vcf"

    // Tabix settings
    tabix_base = "/spaces/gerrit/projects/adme/soft/tabix-0.2.6"

    chromosomes = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y,MT"
    gene_set  = "core"
    adme_dir   = "/spaces/ADME-SHARED"
    adme_samples = "adme-samples_id.lst"
    gene_region_bed = "/spaces/ADME-SHARED/gene_co_ordinates/core.bed"
    gene_region_dir = "/spaces/ADME-SHARED/gene_co_ordinates/"
    gvcf_file = "/spaces/gerrit/projects/adme/combine-gvcfs/sahgp-baylor-agvp-sgdp-1kg_african-caroline-awigen/nextflow-out/sbas1ca/sbas1ca.g.vcf.gz"
    gvcf_dir = "/spaces/gerrit/projects/adme/combine-gvcfs/sahgp-baylor-agvp-sgdp-1kg_african-caroline-awigen/nextflow-out/sbas1ca/"
}


timeline {
    enabled = true
    file = "${params.out_dir}/nextflow_reports/timeline.html"
}
report {
    enabled = true
    file = "${params.out_dir}/nextflow_reports/report.html"
}
trace {
    enabled = true
    file = "${params.out_dir}/nextflow_reports/trace.txt"
}
dag {
    enabled = true
    file = "${params.out_dir}/nextflow_reports/dag.png"
}

executor{
    jobName = { "$task.tag" }
}

process{
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }

    withLabel: "bigmem"{
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) }
        time = { check_max( 96.h * task.attempt, 'time' ) }
    }
}

profiles {
    standard {
        process.executor = 'local'
    }
    wits_slurm {
        process {
            executor = 'slurm'
            errorStrategy = 'retry'
            maxRetries = 5
            maxErrors = 1000
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
